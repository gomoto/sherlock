(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=["$locationProvider","$stateProvider","$urlRouterProvider",function(t,e,r){t.html5Mode(!0),r.otherwise("/"),e.state("brain",{url:"/",template:"<brain></brain>"}).state("janitor",{template:"<janitor></janitor>"}).state("note",{params:{note:null},template:"<note></note>"})}];

},{}],2:[function(require,module,exports){
"use strict";var app_routing_1=require("./app.routing"),brain_module_1=require("./brain/brain.module"),janitor_module_1=require("./janitor/janitor.module"),navbar_module_1=require("./navbar/navbar.module"),note_module_1=require("./note/note.module"),pouchdb_module_1=require("./pouchdb/pouchdb.module");angular.module("sherlock",["ui.router","ngTagsInput",brain_module_1["default"],janitor_module_1["default"],navbar_module_1["default"],note_module_1["default"],pouchdb_module_1["default"]]).config(app_routing_1["default"]);

},{"./app.routing":1,"./brain/brain.module":4,"./janitor/janitor.module":6,"./navbar/navbar.module":7,"./note/note.module":9,"./pouchdb/pouchdb.module":11}],3:[function(require,module,exports){
"use strict";var BrainController=function(){function t(t,e,n,o,s,l,i,a){var r=this;this.$document=t,this.$element=e,this.$log=n,this.pouchdb=o,this.$scope=s,this.$state=l,this.$timeout=i,this.$window=a,this.translate=function(){r.$timeout(function(){var t=r.calculateWidth("brain .level")+r.calculateWidth("brain .note"),e=r.calculateElementWidth(r.$element[0]),n=Math.max(0,t-e),o="translateX(-"+n+"px)";r.$element.css({webkitTransform:o,MozTransform:o,msTransform:o,OTransform:o,transform:o}),r.$log.debug("Translating %s pixels to the left",n)})},this.note=null,this.levels=[{selectedTag:null,tags:null,notes:null}],this.pouchdb.getAllTags().then(function(t){r.levels[0].tags=t}),this.pouchdb.getNotesWithTag(null).then(function(t){r.levels[0].notes=t})}return t.prototype.$onInit=function(){this.$log.debug("Initializing brain component"),this.$window.addEventListener("resize",this.translate,!1)},t.prototype.$onDestroy=function(){this.$log.debug("Destroying brain component"),this.$window.removeEventListener("resize",this.translate,!1)},t.prototype.onTitleMouseenter=function(t,e){this.openNote(e._id),this.assertLevel(t),this.levels[t].selectedTag=null},t.prototype.openNote=function(t){var e=this;this.$log.debug("opening note"),this.pouchdb.get(t).then(function(t){e.note=t,e.translate()})},t.prototype.closeNote=function(){null!==this.note&&(this.$log.debug("closing note"),this.note=null,this.translate())},t.prototype.onTagMouseenter=function(t,e){var n=this;this.closeNote(),this.assertLevel(t),this.levels[t].selectedTag=e.tag;var o=this.levels.map(function(t){return t.selectedTag});null===e.notes?this.pouchdb.getNotesWithTag(e.tag).then(function(t){n.buildNextLevel(t,o)}):this.buildNextLevel(e.notes,o)},t.prototype.buildNextLevel=function(t,e){var n={},o=[];t.forEach(function(t){var s=_.intersection(e,t.tags);s.length===t.tags.length?o.push(t):s.length===e.length&&t.tags.forEach(function(o){_.includes(e,o)||(n[o]||(n[o]=[]),n[o].push(t))})});var s=Object.keys(n).map(function(t){return{tag:t,notes:n[t]}}),l=_.sortBy(s,"tag");this.levels.push({selectedTag:null,tags:l,notes:o}),this.translate()},t.prototype.assertLevel=function(t){this.levels.length-1<=t||(this.$log.debug("Assert level ",t),this.levels.splice(t+1,this.levels.length),this.translate())},t.prototype.onLevelMouseover=function(t,e){this.closeNote(),this.assertLevel(e),this.levels[e].selectedTag=null},t.prototype.calculateWidth=function(t){for(var e=0,n=this.$document[0].querySelectorAll(t),o=0;o<n.length;o++)e+=this.calculateElementWidth(n.item(o));return e},t.prototype.calculateElementWidth=function(t){var e=this.$window.getComputedStyle(t).getPropertyValue("width");return parseFloat(e)},t.prototype.editNote=function(){this.$state.go("note",{note:this.note})},t.$inject=["$document","$element","$log","pouchdb","$scope","$state","$timeout","$window"],t}();Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=BrainController;

},{}],4:[function(require,module,exports){
"use strict";var brain_controller_1=require("./brain.controller");Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=angular.module("sherlock.brain",[]).component("brain",{templateUrl:"src/brain/brain.template.html",controller:brain_controller_1["default"]}).name;

},{"./brain.controller":3}],5:[function(require,module,exports){
"use strict";var JanitorController=function(){function t(t,o,e,n){this.$log=t,this.pouchdb=o,this.$state=e,this.$window=n,this.getAllNotes()}return t.prototype.toJson=function(t){return angular.toJson(t,!0)},t.prototype.getAllNotes=function(){var t=this;this.pouchdb.allNotes().then(function(o){t.$log.debug("allNotes response",o),t.notes=o.rows.map(function(t){return t.doc})})["catch"](this.$log.error)},t.prototype.deleteAllNotes=function(){var t=this;if(this.$window.confirm("Really delete all notes?")){this.$log.debug("Deleting all notes");var o=this.notes.map(function(t){return t._deleted=!0,t});this.pouchdb.bulkDocs(o).then(function(o){t.$log.debug("bulkDocs response",o),t.notes=[]})["catch"](this.$log.error)}},t.prototype.destroyDatabase=function(){var t=this;this.$window.confirm("Really destroy database?")&&(this.$log.debug("Destroying database"),this.pouchdb.destroy().then(function(o){t.$log.debug("db destroyed response",o),t.notes=[]}))},t.prototype.goToNote=function(t){this.$state.go("note",{note:t})},t.$inject=["$log","pouchdb","$state","$window"],t}();Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=JanitorController;

},{}],6:[function(require,module,exports){
"use strict";var janitor_controller_1=require("./janitor.controller");Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=angular.module("sherlock.janitor",[]).component("janitor",{templateUrl:"src/janitor/janitor.template.html",controller:janitor_controller_1["default"]}).name;

},{"./janitor.controller":5}],7:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=angular.module("sherlock.navbar",[]).component("navbar",{templateUrl:"src/navbar/navbar.template.html"}).name;

},{}],8:[function(require,module,exports){
"use strict";var NoteController=function(){function t(t,e,o,s){this.$log=t,this.pouchdb=e,this.$stateParams=o,this.$window=s,this.setNoteState()}return t.prototype.setNoteState=function(){this.$stateParams.note?(this.title=this.$stateParams.note.title,this.content=this.$stateParams.note.content,this.tags=this.$stateParams.note.tags.map(function(t){return{text:t}})):(this.title="",this.content="",this.tags=[])},t.prototype.putNote=function(){var t,e=this;this.$stateParams.note&&(t=this.$stateParams.note._id);var o=this.tags.map(function(t){return t.text}),s={_id:t||this.createNoteId(),title:this.title,content:this.content,tags:o};this.$stateParams.note&&(s._rev=this.$stateParams.note._rev),this.pouchdb.put(s).then(function(t){e.$log.info(t),s._rev=t.rev,e.$stateParams.note=s})["catch"](function(t){e.$log.error("put note error",t)})},t.prototype.deleteNote=function(){var t=this;this.$stateParams.note&&this.$window.confirm("Really delete note?")&&(this.$stateParams.note._deleted=!0,this.pouchdb.put(this.$stateParams.note).then(function(e){t.$log.info(e),t.$stateParams.note=null,t.setNoteState()})["catch"](function(e){t.$log.error("del note error",e)}))},t.prototype.createNoteId=function(){return"note"+(new Date).getTime().toString()},t.$inject=["$log","pouchdb","$stateParams","$window"],t}();Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=NoteController;

},{}],9:[function(require,module,exports){
"use strict";var note_controller_1=require("./note.controller");Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=angular.module("sherlock.note",[]).component("note",{templateUrl:"src/note/note.template.html",controller:note_controller_1["default"]}).name;

},{"./note.controller":8}],10:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]={_id:"_design/tags",views:{tags:{map:function(t){if(t.tags)if(0===t.tags.length)emit(null,{title:t.title,tags:[]});else for(var e=0;e<t.tags.length;e++)emit(t.tags[e],{title:t.title,tags:t.tags})}.toString(),reduce:"_count"}}};

},{}],11:[function(require,module,exports){
"use strict";var pouchdb_service_1=require("./pouchdb.service");Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=angular.module("sherlock.pouchdb",[]).service("pouchdb",pouchdb_service_1["default"]).name;

},{"./pouchdb.service":12}],12:[function(require,module,exports){
"use strict";var pouchdb_design_1=require("./pouchdb.design"),pouchdb=function(){function t(t,e){var o=this;this.$log=t,this.$q=e,this.db=new PouchDB("sherlock"),this.db.put(pouchdb_design_1["default"]).then(function(e){t.debug("design doc response",e)})["catch"](function(t){"conflict"!==t.name&&o.$log.error(t)})}return t.prototype.get=function(t){return this.$q.resolve(this.db.get(t))},t.prototype.put=function(t){return this.$q.resolve(this.db.put(t))},t.prototype.allDocs=function(t){return this.$q.resolve(this.db.allDocs(t))},t.prototype.allNotes=function(){var t={startkey:"note",endkey:"noteï¿°",include_docs:!0};return this.$q.resolve(this.db.allDocs(t))},t.prototype.bulkDocs=function(t){return this.$q.resolve(this.db.bulkDocs(t))},t.prototype.query=function(t,e){return this.$q.resolve(this.db.query(t,e))},t.prototype.destroy=function(){return this.$q.resolve(this.db.destroy())},t.prototype.getNotesWithTag=function(t){var e=this;return this.query("tags",{reduce:!1,key:t}).then(function(t){return e.$log.info("note query response",t),t.rows.map(function(t){return{_id:t.id,title:t.value.title,tags:t.value.tags}})})["catch"](this.$log.error)},t.prototype.getAllTags=function(){var t=this;return this.query("tags",{reduce:!0,group:!0}).then(function(e){return t.$log.info("tag query response",e),e.rows.filter(function(t){return null!==t.key}).map(function(t){return{tag:t.key,notes:null}})})["catch"](this.$log.error)},t.$inject=["$log","$q"],t}();Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=pouchdb;

},{"./pouchdb.design":10}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
